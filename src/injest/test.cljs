(ns injest.test
  (:require
   [injest.core :as injest :refer [x>>]]))

(comment

  ;; these aren't workign in cljs
  (injest/regxf! 'cljs.core/map)
  (injest/reg-xf! map)

  (x>> (range 1000000)
       (map inc)
       (filter odd?)
       (mapcat #(do [% (dec %)]))
       (partition-by #(= 0 (mod % 5)))
       (map (partial apply +))
       (map dec)
       (map (partial + 10))
       (map #(do {:temp-value %}))
       (map :temp-value)
       (filter even?)
    ;;  (x/reduce +)
    ;;  first
       (apply +)
       time)

  (->> (range 1000000)
       (map inc)
       (filter odd?)
       (mapcat #(do [% (dec %)]))
       (partition-by #(= 0 (mod % 5)))
       (map (partial apply +))
       (map dec)
       (map (partial + 10))
       (map #(do {:temp-value %}))
       (map :temp-value)
       (filter even?)
    ;;  (x/reduce +)
    ;;  first
       (apply +)
       time)

  (->> (vec (interleave (range 5000000) (range 60000000)))
       (map inc)
       (filter even?)
       (dedupe)
       (mapcat range)
       (partition-all 3)
       (partition-by #(+ % 7))
       (mapcat flatten)
       (random-sample 1.0)
       (take-nth 1)
       (keep #(when (odd? %) (* % %)))
       (keep-indexed #(when (even? %1) (* %1 %2)))
       (replace {2 "two" 6 "six" 18 "eighteen"})
       (take 11)
       (take-while #(not= 300 %))
       (drop 1)
       (drop-while string?)
       (remove string?)
       (apply +)
       time)

  (x>> (vec (interleave (range 5000000) (range 60000000)))
       (map inc)
       (filter even?)
       (dedupe)
       (mapcat range)
       (partition-all 3)
       (partition-by #(+ % 7))
       (mapcat flatten)
       (random-sample 1.0)
       (take-nth 1)
       (keep #(when (odd? %) (* % %)))
       (keep-indexed #(when (even? %1) (* %1 %2)))
       (replace {2 "two" 6 "six" 18 "eighteen"})
       (take 11)
       (take-while #(not= 300 %))
       (drop 1)
       (drop-while string?)
       (remove string?)
       (apply +)
       time)

  :end)