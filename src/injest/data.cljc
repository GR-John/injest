(ns injest.data)

(def par-regs
  #{'cljs.core/dedupe
    'cljs.core/disj!
    'cljs.core/dissoc!
    'cljs.core/filter
    'cljs.core/keep
    'cljs.core/map
    'cljs.core/random-sample
    'cljs.core/remove
    'cljs.core/replace
    'cljs.core/take-while
    'cljs.core/halt-when
    'cljs.core/mapcat
    'cljs.core/cat

    'clojure.core/dedupe
    'clojure.core/disj!
    'clojure.core/dissoc!
    'clojure.core/filter
    'clojure.core/keep
    'clojure.core/map
    'clojure.core/random-sample
    'clojure.core/remove
    'clojure.core/replace
    'clojure.core/take-while
    'clojure.core/halt-when
    'clojure.core/mapcat
    'clojure.core/cat})

(def def-regs
  #{'cljs.core/mapcat
    'cljs.core/disj!
    'cljs.core/dissoc!
    'cljs.core/keep
    'cljs.core/filter
    'cljs.core/take-while
    'cljs.core/drop-while
    'cljs.core/keep-indexed
    'cljs.core/take
    'cljs.core/partition-all
    'cljs.core/distinct
    'cljs.core/dedupe
    'cljs.core/take-nth
    'cljs.core/map
    'cljs.core/partition-by
    'cljs.core/remove
    'cljs.core/cat
    'cljs.core/replace
    'cljs.core/random-sample
    'cljs.core/interpose
    'cljs.core/map-indexed
    'cljs.core/drop
    'cljs.core/halt-when

    'clojure.core/take-nth
    'clojure.core/disj!
    'clojure.core/dissoc!
    'clojure.core/distinct
    'clojure.core/keep-indexed
    'clojure.core/random-sample
    'clojure.core/map-indexed
    'clojure.core/map
    'clojure.core/replace
    'clojure.core/drop
    'clojure.core/remove
    'clojure.core/cat
    'clojure.core/partition-all
    'clojure.core/interpose
    'clojure.core/mapcat
    'clojure.core/dedupe
    'clojure.core/drop-while
    'clojure.core/partition-by
    'clojure.core/take-while
    'clojure.core/take
    'clojure.core/keep
    'clojure.core/filter
    'clojure.core/halt-when})
